/*******************************************************************************
 * Copyright Â© Squid Solutions, 2016
 *
 * This file is part of Open Bouquet software.
 *  
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation (version 3 of the License).
 *
 * There is a special FOSS exception to the terms and conditions of the 
 * licenses as they are applied to this program. See LICENSE.txt in
 * the directory of this program distribution.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Squid Solutions also offers commercial licenses with additional warranties,
 * professional functionalities or services. If you purchase a commercial
 * license, then it supersedes and replaces any other agreement between
 * you and Squid Solutions (above licenses and LICENSE.txt included).
 * See http://www.squidsolutions.com/EnterpriseBouquet/
 *******************************************************************************/
package com.squid.kraken.v4.core.analysis.engine.project;

import java.util.concurrent.locks.ReentrantLock;

import com.squid.core.expression.scope.ScopeException;
import com.squid.kraken.v4.core.analysis.engine.hierarchy.DomainContent;
import com.squid.kraken.v4.core.analysis.engine.hierarchy.LockableMap;
import com.squid.kraken.v4.core.analysis.universe.Space;
import com.squid.kraken.v4.model.Domain;
import com.squid.kraken.v4.model.DomainPK;

/**
 * T753
 * DomainContentManager is caching DomainContents generated by the DynamicManager
 * @author sergefantino
 *
 */
public class DomainContentManager {
	
	private LockableMap<DomainPK, DomainContent> contents = new LockableMap<>();
	
	public DomainContentManager() {
	}
	
	public DomainContent getDomainContent(Space space) throws ScopeException {
		// check if already available
		Domain domain = space.getDomain();
		DomainContent content = contents.get(domain.getId());
		if (content!=null && content.isValid()) {
			return content;
		}
		ReentrantLock lock = contents.lock(domain.getId());
		try {
			content = contents.get(domain.getId());
			if (content==null || !content.isValid()) {
				contents.remove(domain.getId());
				content = DynamicManager.INSTANCE.loadDomainContent(space);
				contents.put(domain.getId(), content);
			}
			return content;
		} finally {
			lock.unlock();
		}
	}

}
